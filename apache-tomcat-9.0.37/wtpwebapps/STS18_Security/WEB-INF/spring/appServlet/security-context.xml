<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-5.3.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean name="customAccessDenied"
		class="com.lec.sts18_security.security.CustomAccessDeniedHandler" />
		
	<bean name="cutomLoginSuccess"
		class="com.lec.sts18_security.security.CustomLoginSuccessHandler" />
 
 
	<!-- 
	<bean name="customPasswordEncoder"
		class="com.lec.sts18_security.security.CustomNoOpPasswordEncoder"/>
	-->	

	<bean name="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- http://www.springframework.org/schema/security/spring-security-5.3.xsd -->
	<!-- 때문에 error 버전을 빼줄수 있도록합니다. -->
	<!-- http://www.springframework.org/schema/security/spring-security.xsd -->
	<!-- ??? 버전있어도 동작 잘 하는데요 ? -->

	<!-- // 인증 (Authentication : 자신을 증명) 
		// 내가 (스스로) 자신을 증명말 만한 자료를 제시 하는 것. 
		// 인가 (Authorizatoin : 권한부여) 
		// 남에 의해서 ‘자격’ 이 부여된것. 
	-->

	<!-- 컨테이너의 HTTP sequrity 요소 -->
	<security:http>

		<!-- 특정 url pattern 요청이 들어올때 인터셉터를 이용래 접근 제한 설정 -->
		<security:intercept-url pattern="/sample/all"
			access="permitAll" /> <!-- 누구다 다 접근 가능 -->

		<!-- /sample/member URI 요청은 ROLE_MEMBER 라는 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
			
		<!-- /sample/admin URI 요청은 ROLE_ADMIN 권한이 있는 사용자만 접근 가능 -->
		<security:intercept-url 
			pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>

		<!-- 접근 실패시 -->
		<!-- 이상한 로그인폼이 나오는데 spring 이 제공하는 기본 login form -->
		<!-- 우리가 제공한 login form으로 custormizing -->
		<!-- <security:form-login />  -->
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="cutomLoginSuccess"/> <!-- 로그인(인증) 성공 직후 수행할 동작 -->
		
		<!-- 접근권한 에러 발생시 동작시킬 핸들러 : 방법1: url 지정 -->
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		
		<!-- 접근권한 에러 발생시 동작시킬 핸들러 : 방법2: handler 지정 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그인(인증) 성공 직후 수행할 동작 -->
		<!-- security:form-login 에서 연동 -->
		
		<!-- 로그아웃을 수행할 동작 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" /> 
			<!-- logout-success-url="/customLogin"/>  -->
		
	</security:http>

	<!-- AuthenricationManager -->
	<security:authentication-manager>
	<!--  UserDetailsService 를 사용한 인증과 권한 처리 -->
	<!-- login 정보는 JSESSIONID이라는 쿠키로 저장됩니다. -->
		<security:authentication-provider>
		<!-- InMemory 방식 -->
			<!-- name: 사용자의 id를 의미 -->
			<!-- {noop}: password 암호화 encoding 사용 없이사용 -->
			<!-- spring security에서 password는 반드시 암호화가 되어야 합니다. -->
			<!-- 
			<security:user-service>
				<security:user name="member" password="{noop}member"
					authorities="ROLE_MEMBER" />
				<security:user name="admin" password="{noop}admin" 
					authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service>
			 -->
			 
			 <!-- JDBC 방식 -->
			 <!-- JDBC 사용 -->
			<security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query=
				"SELECT userid username, userpw password, enabled FROM tbl_member WHERE userid = ?"
			authorities-by-username-query=
				"SELECT userid username, auth authority FROM tbl_member_auth WHERE userid = ?"
			/>
			 
			 <!-- PasswordEncoder 설정 -->
			 <!-- 
			 <security:password-encoder ref="customPasswordEncoder"/>
     		  -->
			 <security:password-encoder ref="bcryptPasswordEncoder"/>
			 
		</security:authentication-provider>
	</security:authentication-manager>
</beans>