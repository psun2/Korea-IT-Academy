
public class index {

	public static void main(String[] args) {
//		자바 기초 프로그래밍 강좌 4강 - 연산자(Operator) (Java Programming Tutorial 2017 #4)
//		https://www.youtube.com/watch?v=LHRNa3OthRc&list=PLRx0vPvlEmdBjfCADjCc41aD4G0bmdl4R&index=4

//		여기서 잠깐!
//		자료형!?
//		- 기본적으로 정수를 나타내는 자료형이 많은 이유는 각 자료형이 차지하는 메모리 공간의 크기가 다르기 때문입니다.
//		- double 형이라고 하더라고 과도하게 큰 수를 저장하고자 하면 잘못된 계산 결과가 나올 수 있습니다.
//		- 소수점 표기 형식을 지수 형식으로 출력하고 싶으면 %e를 이용하면 됩니다.
//		- 그렇다면 자바에서 String은 내부적으로 char의 배열로 되어 있습니다.
//		  자바에서 String의 최대 크기는 어떻게 될까요?
//		- 자바의 String 클래스 기반의 비원시적인 자료형입니다.

//		연산자
//		계산의 기본
//		연산자는 하나의 기호 체계입니다.
//		흔히 1 + 2에서 1과 2는 피연산자(Operand)이고, +는 연산자(Operator)라고 합니다.
//		프로그래밍에서 연산자란 없어서 안 될 만큼 아주 중요하며 계산에 있어서 가장 기초적인 부분입니다.
//		프로그래밍에서 가장 많이 사용되는 연산자는 +, -, *, /, %입니다.
//		추가적으로 ++와 !등과 같이 다양한 연산자가 사용되는 경우가 있기 때문에 이를 정확이 숙지하는 것이 중요하다고 할 수 있습니다.
//		----------------------------------------------------------------
//		| Operator |             Use              |   Example   | Result |
//		----------------------------------------------------------------
//		|      +     |   To add two numbers   |  i = 3 + 2  |    5    |
//		----------------------------------------------------------------
//		|      -      |       For subtaction       |  i = 3 - 2   |    1    |
//		----------------------------------------------------------------
//		|      *      |     For multiplication     |   i = 3 * 2  |    6    |
//		----------------------------------------------------------------
//		|      /      |         For division         |   i = 3 / 2  |    1    |
//		----------------------------------------------------------------
//		|     %      |     Modular division       | i = 10 % 3 |    1    |
//		|             | (Reminder after division) |                |         |
//		----------------------------------------------------------------  
//		연산자
//		익숙할 때까지 사용해보자
//		연산자를 사용해서 두 수를 적절히 처리할 수 있습니다.
//		- 초를 입력 받아 몇 분 몇 초인지 계산하는 프로그램을 작성해봅시다.
//		- ++와 --연산의 개념을 바르게 이해하고 프로그램을 작성해봅시다.
//		- %연산자의 사용법을 숙지하고 프로그램을 작성해봅시다.
//		- ==, >, <, &&, ||, ! 연산의 개념을 바르게 이해하고 프로그램을 작성해봅시다.
//		- '조건 ? 참 : 거짓' 연산의 형태를 숙지하고 프로그램을 작성해봅시다.
//		- pow()를 이용한 거듭제곱 연산 프로그램을 작성해봅시다.
//		Boolean experssion ? True part : False part

	}
}
