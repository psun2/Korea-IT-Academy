<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.generatedkey.domain.BoardDAO">
    <!-- List<BoardDTO> getListAll() -->
    <!-- id 는 구현하고자 하는 메소드 명과 대응합니다. -->
    <select id="getListAll" resultType="com.lec.generatedkey.domain.BoardDTO">
        SELECT
        wr_uid "uid",
        wr_subject subject,
        wr_content content,
        wr_name name,
        wr_viewcnt viewcnt,
        wr_regdate regdate
        FROM
        test_write
        ORDER BY
        wr_uid DESC
    </select>

    <!-- 오버로딩!!!!!!!!!!!!! -->
    <!-- java 로는 가능하지만 -->
    <!-- MyBatis xml 파일의 id에서는 qnique 하기때문에 Error -->
    <!--
        다만 자바파일에서의 오버로딩이 되어있으면 id가 유니크 하다면
        알아서 주입 되어 사용됩니다.
     -->
    <!--
   <insert id="insert" flushCache="true">
       INSERT INTO
           test_write (wr_uid, wr_subject, wr_content, wr_name, wr_regdate)
       VALUES
           (test_write_seq.nextval, #{param1}, #{param2}, #{param3}, SYSDATE)
   </insert>
   -->

    <!-- List<BoardDTO> readByUid(long uid); -->
    <!-- int viewCnt(long uid); -->
    <!-- Mybatis 는 두개의 트랜잭션 처리를 할 수 없으므로 -->
    <!-- 한개의 트랜잭션으로 쪼개 서 사용 -->
    <update id="viewCnt" parameterType="long">
        UPDATE
        test_write
        SET
        wr_viewcnt = wr_viewcnt + 1
        WHERE
        wr_uid = #{uid}
        <!-- wr_uid = #{param1} -->
    </update>

    <!-- List<WriteDTO> selectByUid(long uid); -->
    <select id="selectByUid"
            parameterType="long"
            resultType="com.lec.generatedkey.domain.BoardDTO">
		SELECT
			wr_uid "uid",
			wr_subject subject,
			wr_content content,
			wr_name name,
			wr_viewcnt viewcnt,
			wr_regdate regdate
		FROM
			test_write
		WHERE
			wr_uid = #{uid}
	</select>

    <!-- int update(WriteDTO dto); -->
    <update id="update"
            parameterType="com.lec.generatedkey.domain.BoardDTO">
        UPDATE
            test_write
        SET
            wr_subject = #{dto.subject},
            wr_content = #{dto.content}
        WHERE
            wr_uid = #{dto.uid}
    </update>

    <!-- int deleteByUid(long uid); -->
    <delete id="deleteByUid" flushCache="true" parameterType="long">
        DELETE FROM
        test_write
        WHERE
        wr_uid = #{uid}
        <!-- wr_uid = #{param1} -->
    </delete>

</mapper>
